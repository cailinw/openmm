{"message":"`main` function not found in crate `emu_openmm`","code":{"code":"E0601","explanation":"\nNo `main` function was found in a binary crate. To fix this error, add a\n`main` function. For example:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can go look to the Rust Book to get\nstarted: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":1804,"line_start":1,"line_end":64,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"use emu_core::prelude::*;","highlight_start":1,"highlight_end":26},{"text":"use emu_glsl::*;","highlight_start":1,"highlight_end":17},{"text":"use zerocopy::*;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[repr(C)]","highlight_start":1,"highlight_end":11},{"text":"#[derive(AsBytes, FromBytes, Copy, Clone, Default, Debug, GlslStruct)]","highlight_start":1,"highlight_end":71},{"text":"struct Shape {","highlight_start":1,"highlight_end":15},{"text":"    x: u32,","highlight_start":1,"highlight_end":12},{"text":"    y: u32,","highlight_start":1,"highlight_end":12},{"text":"    w: i32,","highlight_start":1,"highlight_end":12},{"text":"    h: i32,","highlight_start":1,"highlight_end":12},{"text":"    r: [i32; 2]","highlight_start":1,"highlight_end":16},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub extern \"C\" fn do_something_on_gpu() {","highlight_start":1,"highlight_end":42},{"text":"\t// ensure that a device pool has been initialized","highlight_start":1,"highlight_end":51},{"text":"\t// this should be called before every time when you assume you have devices to use","highlight_start":1,"highlight_end":84},{"text":"\t// that goes for both library users and application users","highlight_start":1,"highlight_end":59},{"text":"\tfutures::executor::block_on(assert_device_pool_initialized());","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// create some data on GPU","highlight_start":1,"highlight_end":28},{"text":"\t// even mutate it once loaded to GPU","highlight_start":1,"highlight_end":38},{"text":"\tlet mut shapes: DeviceBox<[Shape]> = vec![Default::default(); 1024].as_device_boxed().unwrap();","highlight_start":1,"highlight_end":97},{"text":"    let mut x: DeviceBox<[i32]> = vec![0; 1024].as_device_boxed().unwrap();","highlight_start":1,"highlight_end":76},{"text":"\tshapes.set(vec![Shape {","highlight_start":1,"highlight_end":25},{"text":"        x: 0,","highlight_start":1,"highlight_end":14},{"text":"        y: 0,","highlight_start":1,"highlight_end":14},{"text":"        w: 100,","highlight_start":1,"highlight_end":16},{"text":"        h: 100,","highlight_start":1,"highlight_end":16},{"text":"        r: [2, 9]","highlight_start":1,"highlight_end":18},{"text":"    }; 1024]);","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// compiel some code","highlight_start":1,"highlight_end":22},{"text":"\t// then, run it","highlight_start":1,"highlight_end":17},{"text":"\tlet c = compile::<GlslKernel, GlslKernelCompile, _, GlobalCache>(","highlight_start":1,"highlight_end":67},{"text":"        GlslKernel::new()","highlight_start":1,"highlight_end":26},{"text":"            .spawn(1)","highlight_start":1,"highlight_end":22},{"text":"            .param_mut(\"Shape[] shapes\")","highlight_start":1,"highlight_end":41},{"text":"            .param_mut(\"int[] x\")","highlight_start":1,"highlight_end":34},{"text":"            .with_struct::<Shape>()","highlight_start":1,"highlight_end":36},{"text":"            .with_helper_code(","highlight_start":1,"highlight_end":31},{"text":"                r#\"","highlight_start":1,"highlight_end":20},{"text":"Shape flip(Shape s) {","highlight_start":1,"highlight_end":22},{"text":"    s.x = s.x + s.w;","highlight_start":1,"highlight_end":21},{"text":"    s.y = s.y + s.h;","highlight_start":1,"highlight_end":21},{"text":"    s.w *= -1;","highlight_start":1,"highlight_end":15},{"text":"    s.h *= -1;","highlight_start":1,"highlight_end":15},{"text":"    s.r = ivec2(5, 3);","highlight_start":1,"highlight_end":23},{"text":"    return s;","highlight_start":1,"highlight_end":14},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"\"#,","highlight_start":1,"highlight_end":4},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"            .with_kernel_code(","highlight_start":1,"highlight_end":31},{"text":"                \"shapes[gl_GlobalInvocationID.x] = flip(shapes[gl_GlobalInvocationID.x]); x[gl_GlobalInvocationID.x] = 100;\",","highlight_start":1,"highlight_end":126},{"text":"            ),","highlight_start":1,"highlight_end":15},{"text":"    ).unwrap();","highlight_start":1,"highlight_end":16},{"text":"    unsafe {","highlight_start":1,"highlight_end":13},{"text":"        spawn(1024).launch(call!(c, &mut shapes, &mut x)).unwrap();","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// download from GPU and print out","highlight_start":1,"highlight_end":36},{"text":"\tprintln!(\"{:?}\", futures::executor::block_on(shapes.get()).unwrap());","highlight_start":1,"highlight_end":71},{"text":"    println!(\"{:?}\", futures::executor::block_on(x.get()).unwrap());","highlight_start":1,"highlight_end":69},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src/main.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `emu_openmm`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0muse emu_core::prelude::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse emu_glsl::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse zerocopy::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"{:?}\", futures::executor::block_on(x.get()).unwrap());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src/main.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
